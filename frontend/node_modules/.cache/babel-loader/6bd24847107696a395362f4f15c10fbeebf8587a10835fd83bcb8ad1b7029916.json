{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n  const [questionCount, setQuestionCount] = useState(0); // Track how many questions asked\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    startSession();\n  }, []);\n  const startSession = () => {\n    // Ensure sessionId and sessionStartTime are set at the beginning of the session\n    const newSessionId = uuidv4(); // Generate unique session ID\n    const newSessionStartTime = new Date().toISOString(); // Set start time\n\n    // Set session ID and start time in state\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n\n    // Call getNextQuestion only after sessionId and sessionStartTime are set\n    getNextQuestion(newSessionId, newSessionStartTime); // Pass session info to the first question request\n  };\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n      try {\n        // Fetch a random question from OpenAI\n        const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            sessionId,\n            // Ensure this is being sent correctly\n            sessionStartTime,\n            // Ensure this is being sent correctly\n            questionCount\n          })\n        });\n        const data = await response.json();\n        const newQuestion = data.question;\n        setMessages(prevMessages => [...prevMessages, {\n          user: \"Chatbot\",\n          text: newQuestion\n        }]);\n        setQuestionCount(questionCount + 1); // Increment the question count\n        setIsTyping(false);\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n      }\n    } else {\n      // End the session after 10 questions\n      console.log(\"All 10 questions asked, ending session.\");\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"You\",\n      text: input\n    }]); // Show user answer in chat\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          // Include session ID in answer submission\n          questionIndex: questionCount,\n          answer: input,\n          sessionStartTime // Include session start time in answer submission\n        })\n      });\n      const data = await response.json();\n      getNextQuestion(sessionId, sessionStartTime); // Fetch next question\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vHSFui7lOJu5nw37wzWz7AoUuWo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionId","setSessionId","sessionStartTime","setSessionStartTime","questionCount","setQuestionCount","startSession","newSessionId","newSessionStartTime","Date","toISOString","getNextQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","newQuestion","question","prevMessages","user","text","error","console","log","submitAnswer","input","questionIndex","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n  const [questionCount, setQuestionCount] = useState(0); // Track how many questions asked\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    startSession();\n  }, []);\n\n  const startSession = () => {\n    // Ensure sessionId and sessionStartTime are set at the beginning of the session\n    const newSessionId = uuidv4(); // Generate unique session ID\n    const newSessionStartTime = new Date().toISOString(); // Set start time\n\n    // Set session ID and start time in state\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n\n    // Call getNextQuestion only after sessionId and sessionStartTime are set\n    getNextQuestion(newSessionId, newSessionStartTime); // Pass session info to the first question request\n  };\n\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n\n      try {\n        // Fetch a random question from OpenAI\n        const response = await fetch(\n          \"http://localhost:3001/chat/randomQuestion\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              sessionId, // Ensure this is being sent correctly\n              sessionStartTime, // Ensure this is being sent correctly\n              questionCount,\n            }),\n          }\n        );\n\n        const data = await response.json();\n        const newQuestion = data.question;\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: \"Chatbot\", text: newQuestion },\n        ]);\n        setQuestionCount(questionCount + 1); // Increment the question count\n        setIsTyping(false);\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n      }\n    } else {\n      // End the session after 10 questions\n      console.log(\"All 10 questions asked, ending session.\");\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"You\", text: input },\n    ]); // Show user answer in chat\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId, // Include session ID in answer submission\n          questionIndex: questionCount,\n          answer: input,\n          sessionStartTime, // Include session start time in answer submission\n        }),\n      });\n\n      const data = await response.json();\n      getNextQuestion(sessionId, sessionStartTime); // Fetch next question\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Chatbot</h1>\n      <ChatWindow messages={messages} isTyping={isTyping} />\n      <InputForm onSubmit={submitAnswer} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvD;EACAC,SAAS,CAAC,MAAM;IACdqB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,YAAY,GAAGlB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAMmB,mBAAmB,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;;IAEtD;IACAT,YAAY,CAACM,YAAY,CAAC;IAC1BJ,mBAAmB,CAACK,mBAAmB,CAAC;;IAExC;IACAG,eAAe,CAACJ,YAAY,EAAEC,mBAAmB,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAMG,eAAe,GAAG,MAAAA,CAAOX,SAAS,EAAEE,gBAAgB,KAAK;IAC7D,IAAIE,aAAa,GAAG,EAAE,EAAE;MACtBL,WAAW,CAAC,IAAI,CAAC;MAEjB,IAAI;QACF;QACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAC1B,2CAA2C,EAC3C;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBlB,SAAS;YAAE;YACXE,gBAAgB;YAAE;YAClBE;UACF,CAAC;QACH,CACF,CAAC;QAED,MAAMe,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClC,MAAMC,WAAW,GAAGF,IAAI,CAACG,QAAQ;QACjC3B,WAAW,CAAE4B,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;UAAEC,IAAI,EAAE,SAAS;UAAEC,IAAI,EAAEJ;QAAY,CAAC,CACvC,CAAC;QACFhB,gBAAgB,CAACD,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;QACrCL,WAAW,CAAC,KAAK,CAAC;MACpB,CAAC,CAAC,OAAO2B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC,MAAM;MACL;MACAC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCnC,WAAW,CAAE4B,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAEK;IAAM,CAAC,CAC7B,CAAC,CAAC,CAAC;IACJjC,UAAU,CAAC,IAAI,CAAC;IAChBE,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBlB,SAAS;UAAE;UACX+B,aAAa,EAAE3B,aAAa;UAC5B4B,MAAM,EAAEF,KAAK;UACb5B,gBAAgB,CAAE;QACpB,CAAC;MACH,CAAC,CAAC;MAEF,MAAMiB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCT,eAAe,CAACX,SAAS,EAAEE,gBAAgB,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;IAEA7B,UAAU,CAAC,KAAK,CAAC;IACjBE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACER,OAAA;IAAK0C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B3C,OAAA;MAAA2C,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB/C,OAAA,CAACL,UAAU;MAACQ,QAAQ,EAAEA,QAAS;MAACI,QAAQ,EAAEA;IAAS;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtD/C,OAAA,CAACJ,SAAS;MAACoD,QAAQ,EAAEV,YAAa;MAACjC,OAAO,EAAEA;IAAQ;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAAC7C,EAAA,CAvGQD,GAAG;AAAAgD,EAAA,GAAHhD,GAAG;AAyGZ,eAAeA,GAAG;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}