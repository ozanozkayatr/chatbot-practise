{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [answerCount, setAnswerCount] = useState(0);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false);\n  const chatWindowRef = useRef(null);\n\n  // Scroll to the bottom whenever new messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Start the session only once when the component mounts\n  useEffect(() => {\n    if (!sessionStarted) {\n      startSession();\n      setSessionStarted(true);\n    }\n  }, [sessionStarted]);\n  const startSession = () => {\n    const newSessionId = uuidv4();\n    const newSessionStartTime = new Date().toISOString();\n\n    // Reset session states for a new conversation\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n    setAnswerCount(0); // Reset answer count\n    setMessages([]); // Clear old messages\n    setSessionEnded(false);\n    setSessionStarted(true);\n\n    // Trigger the first question right after starting the session\n    getNextQuestion(newSessionId, newSessionStartTime);\n  };\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          sessionStartTime,\n          answerCount // Include answer count to track the session progress\n        })\n      });\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: \"Chatbot\",\n        text: data.question\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"Error fetching random question:\", error);\n      setIsTyping(false);\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: answerCount,\n          // Use answer count to keep track of answers\n          answer: input,\n          sessionStartTime\n        })\n      });\n      await response.json();\n\n      // Increment the answer count and check if session should end\n      setAnswerCount(prevCount => prevCount + 1);\n      if (answerCount + 1 < 10) {\n        getNextQuestion(sessionId, sessionStartTime);\n      } else {\n        setSessionEnded(true); // End session after all answers are received\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${sessionEnded ? \"session-ended\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bolt Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window-wrapper ${sessionEnded ? \"session-ended\" : \"\"}`,\n      ref: chatWindowRef,\n      children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages,\n        isTyping: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), !sessionEnded && /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }, this), sessionEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"closing-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for your contribution! Your answers will be evaluated quickly.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To start a new session, please feel free to continue.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-session-button\",\n        onClick: startSession,\n        children: \"Start New Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J4Nh8Qx92M5a2P4X8rm5EjpDPsQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionId","setSessionId","sessionStartTime","setSessionStartTime","answerCount","setAnswerCount","sessionStarted","setSessionStarted","sessionEnded","setSessionEnded","chatWindowRef","current","scrollTop","scrollHeight","startSession","newSessionId","newSessionStartTime","Date","toISOString","getNextQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","user","text","question","error","console","submitAnswer","input","questionIndex","answer","prevCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [answerCount, setAnswerCount] = useState(0);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false);\n  const chatWindowRef = useRef(null);\n\n  // Scroll to the bottom whenever new messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Start the session only once when the component mounts\n  useEffect(() => {\n    if (!sessionStarted) {\n      startSession();\n      setSessionStarted(true);\n    }\n  }, [sessionStarted]);\n\n  const startSession = () => {\n    const newSessionId = uuidv4();\n    const newSessionStartTime = new Date().toISOString();\n\n    // Reset session states for a new conversation\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n    setAnswerCount(0); // Reset answer count\n    setMessages([]); // Clear old messages\n    setSessionEnded(false);\n    setSessionStarted(true);\n\n    // Trigger the first question right after starting the session\n    getNextQuestion(newSessionId, newSessionStartTime);\n  };\n\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\n        \"http://localhost:3001/chat/randomQuestion\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            sessionId,\n            sessionStartTime,\n            answerCount, // Include answer count to track the session progress\n          }),\n        }\n      );\n\n      const data = await response.json();\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: \"Chatbot\", text: data.question },\n      ]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"Error fetching random question:\", error);\n      setIsTyping(false);\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"You\", text: input },\n    ]);\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: answerCount, // Use answer count to keep track of answers\n          answer: input,\n          sessionStartTime,\n        }),\n      });\n\n      await response.json();\n\n      // Increment the answer count and check if session should end\n      setAnswerCount((prevCount) => prevCount + 1);\n\n      if (answerCount + 1 < 10) {\n        getNextQuestion(sessionId, sessionStartTime);\n      } else {\n        setSessionEnded(true); // End session after all answers are received\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className={`chat-container ${sessionEnded ? \"session-ended\" : \"\"}`}>\n      <h1>Bolt Chat</h1>\n      <div\n        className={`chat-window-wrapper ${sessionEnded ? \"session-ended\" : \"\"}`}\n        ref={chatWindowRef}\n      >\n        <ChatWindow messages={messages} isTyping={isTyping} />\n      </div>\n      {!sessionEnded && <InputForm onSubmit={submitAnswer} loading={loading} />}\n\n      {sessionEnded && (\n        <div className=\"closing-message\">\n          <p>\n            Thank you for your contribution! Your answers will be evaluated\n            quickly.\n          </p>\n          <p>To start a new session, please feel free to continue.</p>\n          <button className=\"start-session-button\" onClick={startSession}>\n            Start New Session\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}