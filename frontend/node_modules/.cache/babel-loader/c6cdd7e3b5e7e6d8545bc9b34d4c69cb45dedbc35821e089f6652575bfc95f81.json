{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    console.log(\"Starting session automatically...\"); // Debug log\n    startSession(); // Automatically start session on component load\n  }, []); // Empty dependency array to ensure this runs only once when the component loads\n\n  const startSession = () => {\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    getQuestion(0); // Fetch the first question after starting session\n  };\n  const getQuestion = async index => {\n    try {\n      const response = await fetch(`http://localhost:3001/chat/question/${index}`);\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"Chatbot\",\n        text: data.question\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages([...messages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          // Include the session ID\n          questionIndex: messages.length,\n          answer: input,\n          sessionStartTime\n        })\n      });\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"You\",\n        text: input\n      }, {\n        user: \"Chatbot\",\n        text: data.aiResponse\n      }]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1ARo6uRivDp/1Sqmc37D+qFP8Xs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionId","setSessionId","sessionStartTime","setSessionStartTime","console","log","startSession","newSessionId","Date","toISOString","getQuestion","index","response","fetch","data","json","user","text","question","error","submitAnswer","input","method","headers","body","JSON","stringify","questionIndex","length","answer","aiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    console.log(\"Starting session automatically...\"); // Debug log\n    startSession(); // Automatically start session on component load\n  }, []); // Empty dependency array to ensure this runs only once when the component loads\n\n  const startSession = () => {\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    getQuestion(0); // Fetch the first question after starting session\n  };\n\n  const getQuestion = async (index) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3001/chat/question/${index}`\n      );\n      const data = await response.json();\n      setMessages([...messages, { user: \"Chatbot\", text: data.question }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages([...messages, { user: \"You\", text: input }]);\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId, // Include the session ID\n          questionIndex: messages.length,\n          answer: input,\n          sessionStartTime,\n        }),\n      });\n\n      const data = await response.json();\n      setMessages([\n        ...messages,\n        { user: \"You\", text: input },\n        { user: \"Chatbot\", text: data.aiResponse },\n      ]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Chatbot</h1>\n      <ChatWindow messages={messages} isTyping={isTyping} />\n      <InputForm onSubmit={submitAnswer} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}