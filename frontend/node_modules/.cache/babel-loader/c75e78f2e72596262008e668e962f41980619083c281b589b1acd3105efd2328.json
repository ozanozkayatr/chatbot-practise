{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false); // Track if session has ended\n\n  useEffect(() => {\n    if (!sessionStarted) {\n      startSession(); // Only start a new session if it hasn't been started yet\n      setSessionStarted(true);\n    }\n  }, [sessionStarted]);\n  const startSession = () => {\n    const newSessionId = uuidv4();\n    const newSessionStartTime = new Date().toISOString();\n\n    // Reset state for new session\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n    setQuestionCount(0);\n    setMessages([]);\n    setSessionEnded(false); // Reset session ended state\n    getNextQuestion(newSessionId, newSessionStartTime);\n  };\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n      try {\n        const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            sessionId,\n            sessionStartTime,\n            questionCount\n          })\n        });\n        const data = await response.json();\n        setMessages(prevMessages => [...prevMessages, {\n          user: \"Chatbot\",\n          text: data.question\n        }]);\n        setQuestionCount(prevCount => prevCount + 1);\n        setIsTyping(false);\n\n        // End session after 10 questions\n        if (questionCount + 1 >= 10) {\n          setSessionEnded(true);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n        setIsTyping(false);\n      }\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: questionCount - 1,\n          // Adjust for zero-based index\n          answer: input,\n          sessionStartTime\n        })\n      });\n      await response.json();\n      if (questionCount < 10) {\n        getNextQuestion(sessionId, sessionStartTime); // Fetch the next question\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bolt Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), !sessionEnded && /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }, this), sessionEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"closing-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for your contribution! Your answers will be evaluated quickly.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To start a new session, please feel free to continue.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-session-button\",\n        onClick: startSession,\n        children: \"Start New Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DB/tMNhqwTU6mPbfbfsaiH/5u54=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionId","setSessionId","sessionStartTime","setSessionStartTime","questionCount","setQuestionCount","sessionStarted","setSessionStarted","sessionEnded","setSessionEnded","startSession","newSessionId","newSessionStartTime","Date","toISOString","getNextQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","user","text","question","prevCount","error","console","submitAnswer","input","questionIndex","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false); // Track if session has ended\n\n  useEffect(() => {\n    if (!sessionStarted) {\n      startSession(); // Only start a new session if it hasn't been started yet\n      setSessionStarted(true);\n    }\n  }, [sessionStarted]);\n\n  const startSession = () => {\n    const newSessionId = uuidv4();\n    const newSessionStartTime = new Date().toISOString();\n\n    // Reset state for new session\n    setSessionId(newSessionId);\n    setSessionStartTime(newSessionStartTime);\n    setQuestionCount(0);\n    setMessages([]);\n    setSessionEnded(false); // Reset session ended state\n    getNextQuestion(newSessionId, newSessionStartTime);\n  };\n\n  const getNextQuestion = async (sessionId, sessionStartTime) => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n\n      try {\n        const response = await fetch(\n          \"http://localhost:3001/chat/randomQuestion\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              sessionId,\n              sessionStartTime,\n              questionCount,\n            }),\n          }\n        );\n\n        const data = await response.json();\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { user: \"Chatbot\", text: data.question },\n        ]);\n        setQuestionCount((prevCount) => prevCount + 1);\n        setIsTyping(false);\n\n        // End session after 10 questions\n        if (questionCount + 1 >= 10) {\n          setSessionEnded(true);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n        setIsTyping(false);\n      }\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"You\", text: input },\n    ]);\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: questionCount - 1, // Adjust for zero-based index\n          answer: input,\n          sessionStartTime,\n        }),\n      });\n\n      await response.json();\n\n      if (questionCount < 10) {\n        getNextQuestion(sessionId, sessionStartTime); // Fetch the next question\n      }\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Bolt Chat</h1>\n      <ChatWindow messages={messages} isTyping={isTyping} />\n      {!sessionEnded && <InputForm onSubmit={submitAnswer} loading={loading} />}\n\n      {/* Show closing statement after the 10th question */}\n      {sessionEnded && (\n        <div className=\"closing-message\">\n          <p>\n            Thank you for your contribution! Your answers will be evaluated\n            quickly.\n          </p>\n          <p>To start a new session, please feel free to continue.</p>\n          <button className=\"start-session-button\" onClick={startSession}>\n            Start New Session\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}