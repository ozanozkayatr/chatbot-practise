{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n  const [questionCount, setQuestionCount] = useState(0); // To keep track of how many questions have been asked\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    console.log(\"Starting session automatically...\");\n    startSession();\n  }, []);\n  const startSession = () => {\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    getNextQuestion(); // Ask the first question\n  };\n  const getNextQuestion = async () => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n      try {\n        // Fetch a random question from OpenAI\n        const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            sessionId,\n            sessionStartTime,\n            questionCount\n          })\n        });\n        const data = await response.json();\n        const newQuestion = data.question;\n        setMessages([...messages, {\n          user: \"Chatbot\",\n          text: newQuestion\n        }]);\n        setQuestionCount(questionCount + 1); // Increment the question count\n        setIsTyping(false);\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n      }\n    } else {\n      // End the session after 10 questions\n      console.log(\"All 10 questions asked, ending session.\");\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages([...messages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: questionCount,\n          answer: input,\n          sessionStartTime\n        })\n      });\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"You\",\n        text: input\n      }, {\n        user: \"Chatbot\",\n        text: data.aiResponse\n      }]);\n\n      // After submitting the answer, get the next question\n      getNextQuestion();\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vHSFui7lOJu5nw37wzWz7AoUuWo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionId","setSessionId","sessionStartTime","setSessionStartTime","questionCount","setQuestionCount","console","log","startSession","newSessionId","Date","toISOString","getNextQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","newQuestion","question","user","text","error","submitAnswer","input","questionIndex","answer","aiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n  const [questionCount, setQuestionCount] = useState(0); // To keep track of how many questions have been asked\n\n  // Automatically start session when component mounts\n  useEffect(() => {\n    console.log(\"Starting session automatically...\");\n    startSession();\n  }, []);\n\n  const startSession = () => {\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    getNextQuestion(); // Ask the first question\n  };\n\n  const getNextQuestion = async () => {\n    if (questionCount < 10) {\n      setIsTyping(true);\n\n      try {\n        // Fetch a random question from OpenAI\n        const response = await fetch(\n          \"http://localhost:3001/chat/randomQuestion\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              sessionId,\n              sessionStartTime,\n              questionCount,\n            }),\n          }\n        );\n\n        const data = await response.json();\n        const newQuestion = data.question;\n        setMessages([...messages, { user: \"Chatbot\", text: newQuestion }]);\n        setQuestionCount(questionCount + 1); // Increment the question count\n        setIsTyping(false);\n      } catch (error) {\n        console.error(\"Error fetching random question:\", error);\n      }\n    } else {\n      // End the session after 10 questions\n      console.log(\"All 10 questions asked, ending session.\");\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages([...messages, { user: \"You\", text: input }]);\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId,\n          questionIndex: questionCount,\n          answer: input,\n          sessionStartTime,\n        }),\n      });\n\n      const data = await response.json();\n      setMessages([\n        ...messages,\n        { user: \"You\", text: input },\n        { user: \"Chatbot\", text: data.aiResponse },\n      ]);\n\n      // After submitting the answer, get the next question\n      getNextQuestion();\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Chatbot</h1>\n      <ChatWindow messages={messages} isTyping={isTyping} />\n      <InputForm onSubmit={submitAnswer} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}