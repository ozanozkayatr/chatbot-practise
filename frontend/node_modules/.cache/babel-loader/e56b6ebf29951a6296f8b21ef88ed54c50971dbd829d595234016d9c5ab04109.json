{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fetch the first question when the component loads\n  useEffect(() => {\n    getQuestion(0);\n  }, []);\n  const getQuestion = async index => {\n    try {\n      const response = await fetch(`http://localhost:3001/chat/question/${index}`);\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"Chatbot\",\n        text: data.question\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages([...messages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true); // Start the typing indicator\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: \"12345\",\n          questionIndex: messages.length,\n          answer: input\n        })\n      });\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"You\",\n        text: input\n      }, {\n        user: \"Chatbot\",\n        text: data.aiResponse\n      }]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false); // Stop the typing indicator\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O2HGGELS5DMMYgiabaZ+UCIifO8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","getQuestion","index","response","fetch","data","json","user","text","question","error","console","submitAnswer","input","method","headers","body","JSON","stringify","userId","questionIndex","length","answer","aiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fetch the first question when the component loads\n  useEffect(() => {\n    getQuestion(0);\n  }, []);\n\n  const getQuestion = async (index) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3001/chat/question/${index}`\n      );\n      const data = await response.json();\n      setMessages([...messages, { user: \"Chatbot\", text: data.question }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages([...messages, { user: \"You\", text: input }]);\n    setLoading(true);\n    setIsTyping(true); // Start the typing indicator\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId: \"12345\",\n          questionIndex: messages.length,\n          answer: input,\n        }),\n      });\n\n      const data = await response.json();\n      setMessages([\n        ...messages,\n        { user: \"You\", text: input },\n        { user: \"Chatbot\", text: data.aiResponse },\n      ]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false); // Stop the typing indicator\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Chatbot</h1>\n      <ChatWindow messages={messages} isTyping={isTyping} />\n      <InputForm onSubmit={submitAnswer} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}