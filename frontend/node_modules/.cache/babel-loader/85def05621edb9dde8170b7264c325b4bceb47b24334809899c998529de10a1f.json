{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionStarted, setSessionStarted] = useState(false); // Initial state is false\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n\n  // Check when the component is rendered\n  useEffect(() => {\n    console.log(\"Component rendered, sessionStarted:\", sessionStarted);\n    if (sessionStarted) {\n      getQuestion(0); // Fetch the first question once the session starts\n    }\n  }, [sessionStarted]);\n  const startSession = () => {\n    console.log(\"Starting session...\"); // Debugging log to check if button click works\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    setSessionStarted(true); // Set sessionStarted to true, should trigger re-render\n  };\n  const getQuestion = async index => {\n    try {\n      const response = await fetch(`http://localhost:3001/chat/question/${index}`);\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"Chatbot\",\n        text: data.question\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n  const submitAnswer = async input => {\n    setMessages([...messages, {\n      user: \"You\",\n      text: input\n    }]);\n    setLoading(true);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          // Include the session ID\n          questionIndex: messages.length,\n          answer: input,\n          sessionStartTime\n        })\n      });\n      const data = await response.json();\n      setMessages([...messages, {\n        user: \"You\",\n        text: input\n      }, {\n        user: \"Chatbot\",\n        text: data.aiResponse\n      }]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n    setLoading(false);\n    setIsTyping(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [!sessionStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-session-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSession,\n        className: \"start-session-btn\",\n        children: \"Start Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), sessionStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages,\n        isTyping: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n        onSubmit: submitAnswer,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"F3vbob0T89epAZ4e2X+ZCAncgaA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","messages","setMessages","loading","setLoading","isTyping","setIsTyping","sessionStarted","setSessionStarted","sessionId","setSessionId","sessionStartTime","setSessionStartTime","console","log","getQuestion","startSession","newSessionId","Date","toISOString","index","response","fetch","data","json","user","text","question","error","submitAnswer","input","method","headers","body","JSON","stringify","questionIndex","length","answer","aiResponse","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\"; // For generating unique session ID\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionStarted, setSessionStarted] = useState(false); // Initial state is false\n  const [sessionId, setSessionId] = useState(null); // Session ID\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Start timestamp\n\n  // Check when the component is rendered\n  useEffect(() => {\n    console.log(\"Component rendered, sessionStarted:\", sessionStarted);\n    if (sessionStarted) {\n      getQuestion(0); // Fetch the first question once the session starts\n    }\n  }, [sessionStarted]);\n\n  const startSession = () => {\n    console.log(\"Starting session...\"); // Debugging log to check if button click works\n    const newSessionId = uuidv4(); // Generate unique session ID\n    setSessionId(newSessionId);\n    setSessionStartTime(new Date().toISOString());\n    setSessionStarted(true); // Set sessionStarted to true, should trigger re-render\n  };\n\n  const getQuestion = async (index) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3001/chat/question/${index}`\n      );\n      const data = await response.json();\n      setMessages([...messages, { user: \"Chatbot\", text: data.question }]);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n    }\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages([...messages, { user: \"You\", text: input }]);\n    setLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://localhost:3001/chat/answer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sessionId, // Include the session ID\n          questionIndex: messages.length,\n          answer: input,\n          sessionStartTime,\n        }),\n      });\n\n      const data = await response.json();\n      setMessages([\n        ...messages,\n        { user: \"You\", text: input },\n        { user: \"Chatbot\", text: data.aiResponse },\n      ]);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n    }\n\n    setLoading(false);\n    setIsTyping(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {!sessionStarted && (\n        <div className=\"start-session-overlay\">\n          <button onClick={startSession} className=\"start-session-btn\">\n            Start Session\n          </button>\n        </div>\n      )}\n      {sessionStarted && (\n        <>\n          <h1>Chatbot</h1>\n          <ChatWindow messages={messages} isTyping={isTyping} />\n          <InputForm onSubmit={submitAnswer} loading={loading} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhE;EACAC,SAAS,CAAC,MAAM;IACduB,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEP,cAAc,CAAC;IAClE,IAAIA,cAAc,EAAE;MAClBQ,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACR,cAAc,CAAC,CAAC;EAEpB,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzBH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACpC,MAAMG,YAAY,GAAGvB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/BgB,YAAY,CAACO,YAAY,CAAC;IAC1BL,mBAAmB,CAAC,IAAIM,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IAC7CX,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMO,WAAW,GAAG,MAAOK,KAAK,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuCF,KAAK,EAC9C,CAAC;MACD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCtB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEwB,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAEH,IAAI,CAACI;MAAS,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC5B,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEwB,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAEI;IAAM,CAAC,CAAC,CAAC;IACxD1B,UAAU,CAAC,IAAI,CAAC;IAChBE,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChES,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB1B,SAAS;UAAE;UACX2B,aAAa,EAAEnC,QAAQ,CAACoC,MAAM;UAC9BC,MAAM,EAAER,KAAK;UACbnB;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMY,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCtB,WAAW,CAAC,CACV,GAAGD,QAAQ,EACX;QAAEwB,IAAI,EAAE,KAAK;QAAEC,IAAI,EAAEI;MAAM,CAAC,EAC5B;QAAEL,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAEH,IAAI,CAACgB;MAAW,CAAC,CAC3C,CAAC;IACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;IAEAxB,UAAU,CAAC,KAAK,CAAC;IACjBE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEV,OAAA;IAAK4C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,GAC5B,CAAClC,cAAc,iBACdX,OAAA;MAAK4C,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eACpC7C,OAAA;QAAQ8C,OAAO,EAAE1B,YAAa;QAACwB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAE7D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EACAvC,cAAc,iBACbX,OAAA,CAAAE,SAAA;MAAA2C,QAAA,gBACE7C,OAAA;QAAA6C,QAAA,EAAI;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBlD,OAAA,CAACL,UAAU;QAACU,QAAQ,EAAEA,QAAS;QAACI,QAAQ,EAAEA;MAAS;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtDlD,OAAA,CAACJ,SAAS;QAACuD,QAAQ,EAAElB,YAAa;QAAC1B,OAAO,EAAEA;MAAQ;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACvD,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9C,EAAA,CAvFQD,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AAyFZ,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}