{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozano\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\case-study\\\\chatbot-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ChatWindow from \"./ChatWindow\";\nimport InputForm from \"./InputForm\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [sessionActive, setSessionActive] = useState(true);\n  const [questionCount, setQuestionCount] = useState(0);\n  useEffect(() => {\n    if (sessionActive && questionCount === 0) {\n      startSession();\n    }\n  }, [sessionActive]);\n  const startSession = () => {\n    setQuestionCount(0); // Reset question count for new session\n    setMessages([]); // Clear messages for new session\n    fetchRandomQuestion();\n  };\n  const fetchRandomQuestion = async () => {\n    setLoading(true);\n    const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n      method: \"POST\"\n    });\n    const data = await response.json();\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"Chatbot\",\n      text: data.question\n    }]);\n    setLoading(false);\n  };\n  const submitAnswer = async input => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"You\",\n      text: input\n    }]);\n    const response = await fetch(\"http://localhost:3001/chat/answer\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        answer: input\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    setMessages(prevMessages => [...prevMessages, {\n      user: \"Chatbot\",\n      text: data.aiResponse\n    }]);\n\n    // Increment question count\n    setQuestionCount(prevCount => prevCount + 1);\n\n    // If 10 questions have been asked, end the session\n    if (questionCount + 1 >= 10) {\n      setSessionActive(false);\n    } else {\n      fetchRandomQuestion();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      isTyping: isTyping,\n      hasFinished: !sessionActive && questionCount >= 10,\n      startNewSession: () => setSessionActive(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), sessionActive && /*#__PURE__*/_jsxDEV(InputForm, {\n      onSubmit: submitAnswer,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cB7OT0DdfcSe6mch/pjhh/gDRs8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","isTyping","setIsTyping","loading","setLoading","sessionActive","setSessionActive","questionCount","setQuestionCount","startSession","fetchRandomQuestion","response","fetch","method","data","json","prevMessages","user","text","question","submitAnswer","input","body","JSON","stringify","answer","headers","aiResponse","prevCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasFinished","startNewSession","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/ozano/OneDrive/Masaüstü/case-study/chatbot-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ChatWindow from \"./ChatWindow\";\nimport InputForm from \"./InputForm\";\nimport \"./App.css\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [sessionActive, setSessionActive] = useState(true);\n  const [questionCount, setQuestionCount] = useState(0);\n\n  useEffect(() => {\n    if (sessionActive && questionCount === 0) {\n      startSession();\n    }\n  }, [sessionActive]);\n\n  const startSession = () => {\n    setQuestionCount(0); // Reset question count for new session\n    setMessages([]); // Clear messages for new session\n    fetchRandomQuestion();\n  };\n\n  const fetchRandomQuestion = async () => {\n    setLoading(true);\n    const response = await fetch(\"http://localhost:3001/chat/randomQuestion\", {\n      method: \"POST\",\n    });\n    const data = await response.json();\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"Chatbot\", text: data.question },\n    ]);\n    setLoading(false);\n  };\n\n  const submitAnswer = async (input) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"You\", text: input },\n    ]);\n\n    const response = await fetch(\"http://localhost:3001/chat/answer\", {\n      method: \"POST\",\n      body: JSON.stringify({ answer: input }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { user: \"Chatbot\", text: data.aiResponse },\n    ]);\n\n    // Increment question count\n    setQuestionCount((prevCount) => prevCount + 1);\n\n    // If 10 questions have been asked, end the session\n    if (questionCount + 1 >= 10) {\n      setSessionActive(false);\n    } else {\n      fetchRandomQuestion();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1>Chatbot</h1>\n      <ChatWindow\n        messages={messages}\n        isTyping={isTyping}\n        hasFinished={!sessionActive && questionCount >= 10}\n        startNewSession={() => setSessionActive(true)}\n      />\n      {sessionActive && <InputForm onSubmit={submitAnswer} loading={loading} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}